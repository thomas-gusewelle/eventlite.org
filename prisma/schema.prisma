// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  firstName      String
  lastName       String
  status         UserStatus       @default(USER)
  roles          Role[]
  eventPositions EventPositions[]
  email          String           @unique
  emailVerified  DateTime?
  phoneNumber    String?
  image          String?
  // accounts       Account[]
  // sessions       Session[]
  Organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?
  availability   Availability[]
  hasLogin       Boolean          @default(false)

  userSettingsId   String?
  UserSettings     UserSettings?
  InviteLink       InviteLink?
  ResetPassword    ResetPassword[]
  BugFeatureReport BugFeatureReport[]

  @@index([id, organizationId, userSettingsId])
}

model InviteLink {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model ResetPassword {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model UserSettings {
  id                     String  @id @default(cuid())
  User                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String  @unique
  scheduleShowAmount     Int     @default(4)
  showInactiveInSchedule Boolean @default(false)
}

enum UserStatus {
  USER
  ADMIN
  INACTIVE
}

model Availability {
  id     String   @id @default(cuid())
  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  date   DateTime
}

model Organization {
  id           String      @id @default(uuid())
  name         String
  phone_number String?
  users        User[]
  locations    Locations[]
  events       Event[]
  roles        Role[]

  @@index([id])
}

model Locations {
  id             String       @id @default(uuid())
  name           String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  events         Event[]
}

model Role {
  id             String           @id @default(uuid())
  name           String
  users          User[]
  Organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  eventPositions EventPositions[]

  @@index([organizationId])
}

model Event {
  id               String           @id @default(cuid())
  recurringId      String?
  name             String
  Organization     Organization?    @relation(fields: [organizationId], references: [id])
  organizationId   String?
  datetime         DateTime
  timezone         String          @default("America/Chicago")
  Locations        Locations?       @relation(fields: [locationsId], references: [id])
  locationsId      String?
  positions        EventPositions[]
  unavailableUsers Json?

  @@index([id, organizationId])
}

model EventReccurance {
  recurringId         String    @id
  repeatFrequecyId    String
  repeatFrequencyName String
  DEndSelectId        String?
  DEndSelectName      String?
  DNum                Int?
  DDate               DateTime?
  WEndSelectId        String?
  WEndSelectName      String?
  WNum                Int?
  WDate               DateTime?
  WCEndSelectId       String?
  WCEndSelectName     String?
  WCNum               Int?
  WCDate              DateTime?
  WCSun               Boolean?
  WCMon               Boolean?
  WCTues              Boolean?
  WCWed               Boolean?
  WCThurs             Boolean?
  WCFri               Boolean?
  WCSat               Boolean?
  MEndSelectId        String?
  MEndSelectName      String?
  MNum                Int?
  MDate               DateTime?
}

//each event has its own positions to faciliate different people being scheduled for different events
model EventPositions {
  id           String   @id @default(cuid())
  Event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String
  Role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
  userResponse Boolean?

  @@index([eventId, roleId])
}

model BetaInterest {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  email      String
  orgName    String
  teamSize   String
  inviteSent Boolean @default(false)
}

model BugFeatureReport {
  id     String  @id @default(cuid())
  type   String
  text   String
  url    String
  picUrl String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?
}
