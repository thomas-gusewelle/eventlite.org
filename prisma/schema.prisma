// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  firstName      String?
  lastName       String?
  status         UserStatus       @default(USER)
  roles          Role[]
  eventPositions EventPositions[]
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  // accounts       Account[]
  // sessions       Session[]
  Organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?
  availability   Availability[]
  hasLogin       Boolean          @default(false)

  @@index([id, organizationId])
}

enum UserStatus {
  USER
  MANAGER
  ADMIN
}

model Availability {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id])
  userId String
}

model Organization {
  id           String      @id @default(uuid())
  name         String
  phone_number String?
  users        User[]
  locations    Locations[]
  events       Event[]
  roles        Role[]

  @@index([id])
}

model Locations {
  id             String       @id @default(uuid())
  name           String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  events         Event[]
}

model Role {
  id             String           @id @default(uuid())
  name           String
  users          User[]
  Organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  eventPositions EventPositions[]

  @@index([organizationId])
}

model Event {
  id               String           @id @default(cuid())
  recurringId      String?
  name             String
  Organization     Organization?    @relation(fields: [organizationId], references: [id])
  organizationId   String?
  datetime         DateTime
  Locations        Locations?       @relation(fields: [locationsId], references: [id])
  locationsId      String?
  positions        EventPositions[]
  unavailableUsers Json?

  @@index([id, organizationId])
}

model EventPositions {
  id      String  @id @default(cuid())
  Event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String?
  Role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId  String
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  userResponse Boolean?
}
